
// Avoid `console` errors in browsers that lack a console.
if (!(window.console && console.log)) {
    (function() {
        var noop = function() {};
        var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'markTimeline', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];
        var length = methods.length;
        var console = window.console = {};
        while (length--) {
            console[methods[length]] = noop;
        }
    }());
}

function CookieManager(settings) {

    var me = this;

    var defaultSettings = {
        defaultPermission: 0,
        permissions: {
            'default': true,
            'max': 1,
            0: {},
            1: {}
        },
        cookiesToDelete: {
            0: {},
            1: {}
        }
    };
    settings = jQuery.extend(true, defaultSettings, settings ? settings : {});

    function executeGlobally(f) {
        var code = false;
        if (typeof f == 'string') {
            code = f;
        } else if (typeof f == 'function') {
            var outerCode = f.toString();
            code = outerCode.substring(outerCode.indexOf('{') + 1);
            code = code.substring(0, code.lastIndexOf('}'));
        }
        if (code) {
            jQuery.globalEval(code);
        }
    }

    function extendChain(from, to, chain) {
        var result = {};
        if (from <= to) {
            for (var i = from; i <= to; i++) {
                result = jQuery.extend(true, chain[i], result);
            }
        } else {
            for (var i = from; i >= to; i--) {
                result = jQuery.extend(true, chain[i], result);
            }
        }
        return result;
    }

    this.isSystemAllowed = function(systemKey) {
        var cookiePermission = this.getCookiePermission();
        

        var permissions = extendChain(cookiePermission, 0, settings.permissions);

        if (permissions[systemKey] !== undefined) {
            return permissions[systemKey];
        } else if (permissions['default'] !== undefined) {
            return permissions['default'];
        } else {
            return settings.permissions['default'];
        }
    };

    this.startSystem = function(systemKey, systemStartup) {
        var allowed = this.isSystemAllowed(systemKey);
        if (allowed) {
            executeGlobally(systemStartup);
            return true;
        }
        return false;
    };

    this.setCookiePermission = function(value) {
        jQuery.cookiePermission(value);

        var cookiesToDelete = extendChain(value, 0, settings.cookiesToDelete);
        for (var key in cookiesToDelete) {
            if (cookiesToDelete[key]) {
                jQuery.removeCookie(key);
            }
        }
    };

    this.getCookiePermission = function() {
        var cookiePermission = jQuery.cookiePermission();
        if (cookiePermission === null) {
            return settings.defaultPermission;
        }
        return cookiePermission;
    };

    this.cookiePermissionSet = function() {
        return jQuery.cookiePermission() !== null;
    };

    this.getPermissionMax = function() {
        return settings.permissions.max;
    };
}

function CookieManagerUi(settings) {

    var me = this;

    var defaultSettings = {
    };
    settings = jQuery.extend(true, defaultSettings, settings ? settings : {});

    var listeners = {
        notificationShown: [],
        notificationHidden: [],
        settingsShown: [],
        settingsHidden: []
    };

    var $settings;
    var $settingsApply;
    var $settingsCancel;
    var $settingsSlider;
    var $settingsSliderDescriptionFunctional;
    var $settingsSliderDescriptionAll;

    var cookiePermission = window.cookieManager.getCookiePermission();
    var oldCookiePermission = cookiePermission;

    var callback;

    function notifyListeners(type, value) {
        for (var i = 0; i < listeners[type].length; i++) {
            listeners[type][i](value);
        }
    }

    $(document).ready(function() {
        $('a[href$="#cookie-settings"]').click(function(e) {
            e.preventDefault();
            me.showSettings();
        });
    });

    this.updateUi = function() {
        $settings.find('.cookie-settings-description-item[data-cookie-settings-item]').removeClass('active');
        for (var i = window.cookieManager.getPermissionMax(); i >= cookiePermission; i--) {
            $settings.find('.cookie-settings-description-item[data-cookie-settings-item="' + i + '"]').addClass('active');
        }
    }

    this.initSettings = function() {
        $settings = $('#cookie-settings');
        if ($settings.length == 0) { return; }
        $settingsApply = $settings.find('#cookie-settings-btn-apply');
        $settingsCancel = $settings.find('#cookie-settings-btn-cancel');
        $settingsSlider = $('#cookie-settings-slider');

        cookiePermission = window.cookieManager.getCookiePermission();
        
        $settingsSlider.noUiSlider({
            handles: 1,
            range: [0, 1],
            start: [cookiePermission],
            step: 1,
            orientation: 'vertical',
            direction: 'rtl',
            slide: function() {
                cookiePermission = parseInt($settingsSlider.val());
                me.updateUi();
            }
        });

        $settingsCancel.click(function(e) {
            e.preventDefault();
            $settings.modal('hide');
            notifyListeners('settingsHidden', false);
        });

        $settingsApply.click(function(e) {
            e.preventDefault();

            // save permissions
            window.cookieManager.setCookiePermission(cookiePermission);

            $settings.modal('hide');
            notifyListeners('settingsHidden', true);

            if (cookiePermission != oldCookiePermission) {
                // cookie permissions changed, reload
                location.reload();
            }
        });
    }

    this.showSettings = function(_callback) {

        callback = _callback;
        cookiePermission = window.cookieManager.getCookiePermission();
        oldCookiePermission = cookiePermission;

        if (!$settings || $settings.length == 0) {
            jQuery.ajax(
                'index.php?id=' + settings.notificationPid + '&tx_leicausers_pi9[dialog]=1',
                {
                    success: function(data) {
                        $('body').append($(data));
                        me.initSettings();
                        me.showSettings();
                    }
                }
            );
        } else {
            $settingsSlider.val(cookiePermission);
            me.updateUi();
            $settings.modal('show');
            notifyListeners('settingsShown');

        }
    }

    this.notification = function() {
        if (window.cookieManager.cookiePermissionSet()) { return; }
        jQuery.ajax(
            'index.php?id=' + settings.notificationPid,
            {
                success: function(data) {
                    $('body').prepend($(data));
                    
                    var $notification = $('#cookie-notification');
                    var $notificationDiscard = $notification.find('#cookie-notification-discard');
                    var $settingsLinks = $notification.find('a[href$="#cookie-settings"]');

                    
                    jQuery.cookie('cookieNotificationVisited', 1, { path: '/', expires: 365 });
                    $notification.slideDown(function() { notifyListeners('notificationShown'); });

                    $notificationDiscard.click(function(e) {
                        e.preventDefault();
                        jQuery.cookiePermission('0');
                        $notification.slideUp(function() { notifyListeners('notificationHidden'); });
                    });

                    me.settingsHidden(function(accepted) {
                        if (accepted) {
                            $notification.slideUp(function() { notifyListeners('notificationHidden'); });
                        }
                    });

                    $settingsLinks.click(function(e) {
                        e.preventDefault();
                        me.showSettings();
                    });
                }
            }
        );
    };

    this.notificationShown = function(listener) {
        listeners.notificationShown.push(listener);
    }

    this.notificationHidden = function(listener) {
        listeners.notificationHidden.push(listener);
    }

    this.settingsShown = function(listener) {
        listeners.settingsShown.push(listener);
    }

    this.settingsHidden = function(listener) {
        listeners.settingsHidden.push(listener);
    }
}

/*********************
// Track 
*/
jQuery.cookie=function(name,value,options){if(typeof value!='undefined'){options=options||{};if(value===null){value='';options=$.extend({},options);options.expires=-1;}var expires='';if(options.expires&&(typeof options.expires=='number'||options.expires.toUTCString)){var date;if(typeof options.expires=='number'){date=new Date();date.setTime(date.getTime()+(options.expires*24*60*60*1000));}else{date=options.expires;}expires='; expires='+date.toUTCString();}var path=options.path?'; path='+(options.path):'';var domain=options.domain?'; domain='+(options.domain):'';var secure=options.secure?'; secure':'';document.cookie=[name,'=',encodeURIComponent(value),expires,path,domain,secure].join('');}else{var cookieValue=null;if(document.cookie&&document.cookie!=''){var cookies=document.cookie.split(';');for(var i=0;i<cookies.length;i++){var cookie=jQuery.trim(cookies[i]);if(cookie.substring(0,name.length+1)==(name+'=')){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}return cookieValue;}};

{
    jQuery.cookiePermission = function(value) {
        if (value === undefined) {
            return jQuery.cookie('PermissionCookie');
        } else {
            return jQuery.cookie('PermissionCookie', value, { path: '/', expires: 365 });
        }
    };

    jQuery.removeCookie = function(name, options) {
        return jQuery.cookie(name, null, options);
    };

    jQuery.cookieCheck = function() {
        jQuery.cookie('TemporaryTestCookie', true, { path: '/' });
        if (jQuery.cookie('TemporaryTestCookie')) {
            return true;
        }
        return false;
    };
}
